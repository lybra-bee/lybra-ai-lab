// script.js
document.addEventListener('DOMContentLoaded', function() {
    // –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–µ–π—Ä–æ–Ω–æ–≤ –≤ —à–∞–ø–∫–µ
    function createNeurons() {
        const neuronContainer = document.getElementById('neuronContainer');
        if (!neuronContainer) return;
        
        const neuronCount = 20;
        
        for (let i = 0; i < neuronCount; i++) {
            const neuron = document.createElement('div');
            neuron.className = 'neuron';
            
            // –°–ª—É—á–∞–π–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
            neuron.style.left = Math.random() * 100 + '%';
            neuron.style.top = Math.random() * 100 + '%';
            
            // –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏
            neuron.style.animationDelay = Math.random() * 3 + 's';
            
            // –°–ª—É—á–∞–π–Ω—ã–π —Ä–∞–∑–º–µ—Ä
            const size = 2 + Math.random() * 3;
            neuron.style.width = size + 'px';
            neuron.style.height = size + 'px';
            
            neuronContainer.appendChild(neuron);
        }
    }

    // –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    function initSmoothScroll() {
        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
            anchor.addEventListener('click', function (e) {
                e.preventDefault();
                const target = document.querySelector(this.getAttribute('href'));
                if (target) {
                    target.scrollIntoView({
                        behavior: 'smooth',
                        block: 'start'
                    });
                }
            });
        });
    }

    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ
    function initScrollAnimations() {
        const observerOptions = {
            threshold: 0.1,
            rootMargin: '0px 0px -50px 0px'
        };

        const observer = new IntersectionObserver(function(entries) {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.style.opacity = '1';
                    entry.target.style.transform = 'translateY(0)';
                }
            });
        }, observerOptions);

        // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤
        document.querySelectorAll('.hardware-item, .experiment-card, .result-item').forEach(el => {
            el.style.opacity = '0';
            el.style.transform = 'translateY(30px)';
            el.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
            observer.observe(el);
        });
    }

    // –ü–æ–∫–∞–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    function initSystemInfo() {
        const stats = document.querySelector('.lab-stats');
        if (stats) {
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–¥–µ—Å—å
            console.log('–°–∏—Å—Ç–µ–º–∞ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    function initImageLoading() {
        const images = document.querySelectorAll('img[loading="lazy"]');
        let loadedCount = 0;
        const totalImages = images.length;

        images.forEach(img => {
            img.addEventListener('load', function() {
                loadedCount++;
                if (loadedCount === totalImages) {
                    console.log('–í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
                }
            });
            
            img.addEventListener('error', function() {
                console.log('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', img.src);
                img.alt = '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ';
            });
        });
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π
    function init() {
        createNeurons();
        initSmoothScroll();
        initScrollAnimations();
        initSystemInfo();
        initImageLoading();
        
        console.log('üß™ Lybra AI Lab –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    // –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    init();
});
